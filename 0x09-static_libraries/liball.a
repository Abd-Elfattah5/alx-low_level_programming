!<arch>
//                                              204       `
100-times_table.c/
10-print_triangle.c/
11-print_to_98.c/
2-print_alphabet_x10.c/
3-print_numbers.c/
4-print_most_numbers.c/
5-more_numbers.c/
7-print_diagonal.c/
7-print_last_digit.c/
8-print_square.c/

0-isupper.c/    0           0     0     644     262       `
#include "main.h"

/**
  * _isupper - function to check the letter case
  *Return: return 1 if letter is upper case
  * 0 otherwise
  * @c: is the letter ascii to be checked
  */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}
0-main.c/       0           0     0     644     227       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code 
 *
 * Return: Always 0.
 */
int main(void)
{
    int n;

    n = 402;
    printf("n=%d\n", n);
    reset_to_98(&n);
    printf("n=%d\n", n);
    return (0);
}

0-putchar.c/    0           0     0     644     201       `
#include <stdio.h>
/**
  *main - entry point
  *Return: always 0 (success)
  */
int main(void)
{
	int i;
	char word[] = "_putchar\n";

	for (i = 0; i < 9; i++)
	{
		putchar(word[i]);
	}
	return (0);
}

0-reset_to_98.c/0           0     0     644     195       `
#include "main.h"

/**
  *reset_to_98 - function to reset the pointer to certain number
  *Return: always 0 (success)
  *@n: the pointer to the number
  */
void reset_to_98(int *n)
{
	*n = 98;
}

/0              0           0     0     644     839       `
#include "main.h"
/**
  * print_times_table - function to print the times tables
  * Return: always 0 (success)
  * @n: the number we will stop on
  */
void print_times_table(int n)
{
	int i;
	int j;
	int k;

	if (n > 15)
		return;
	for (i = 0; i <= n; i++)
	{
		for (j = 0; j <= n; j++)
		{
			k = j * i;
			if (j == 0)
			{
				_putchar(k + '0');
			} else if (k < 10 && j != 0)
			{
				_putchar(',');
				_putchar(' ');
				_putchar(' ');
				_putchar(' ');
				_putchar(k + '0');
			} else if (k >= 10 && k < 100)
			{
				_putchar(',');
				_putchar(' ');
				_putchar(' ');
				_putchar((k / 10) + '0');
				_putchar((k % 10) + '0');
			} else if (k >= 100)
			{
				_putchar(',');
				_putchar(' ');
				_putchar((k / 100) + '0');
				_putchar(((k / 10) % 10) + '0');
				_putchar((k % 10) + '0');
			}

		}
		_putchar('\n');
	}
}

101-natural.c/  0           0     0     644     285       `
#include "main.h"
#include <stdio.h>
/**
 * main - program to print the multipliers of 3 and 5
 *
 * Return: Always 0 (success).
 */
int main(void)
{
	int i, sum;

	sum = 0;

	for (i = 1; i < 1025; i++)
		if (i % 3 == 0 || i % 5 == 0)
			sum += i;
	printf("%d\n", sum);
	return (0);
}

102-fibonacci.c/0           0     0     644     385       `
#include "main.h"
#include <stdio.h>
/**
 * main - program to print the first 50 numbers of fibonacci
 *
 * Return: Always 0 (success).
 */
int main(void)
{
	int i = 0;
	unsigned long fib1 = 0, fib2 = 1, sum;

	while (i != 50)
	{
		sum = fib1 + fib2;
		printf("%lu", sum);

		fib1 = fib2;
		fib2 = sum;

		if (i == 49)
			printf("\n");
		else
			printf(", ");
		i++;
	}
	return (0);
}

103-fibonacci.c/0           0     0     644     372       `
#include "main.h"
#include <stdio.h>
/**
 * main - program to print the first 50 numbers of fibonacci
 *
 * Return: Always 0 (success).
 */
int main(void)
{
	unsigned long fib1 = 0, fib2 = 1, sum = 0, total = 0;

	while (sum <= 4000000)
	{
		sum = fib1 + fib2;

		fib1 = fib2;
		fib2 = sum;

		if (sum % 2 == 0)
			total += sum;
	}
	printf("%lu\n", total);
	return (0);
}
10-add.c/       0           0     0     644     193       `
#include "main.h"
/**
  *add - function to add two numbers
  *Return: the add two numbers
  *@i: first number to add
  *@j: second number to add
  */
int add(int i, int j)
{
	return (i + j);
}

10-main.c/      0           0     0     644     204       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    print_triangle(2);
    print_triangle(10);
    print_triangle(1);
    print_triangle(0);
    return (0);
}
/19             0           0     0     644     389       `
#include "main.h"

/**
  *print_triangle - function to print a triangle
  *Return: always 0 (success)
  *@size: is the size of the triangle
  */
void print_triangle(int size)
{
	int i, j, k;

	if (size > 0)
		for (i = 1; i <= size; i++)
		{
			for (j = 0; j < size - i; j++)
				_putchar(' ');
			for (k = 0; k < i; k++)
				_putchar('#');
			_putchar('\n');
		}
	else
		_putchar('\n');
}

/40             0           0     0     644     456       `
#include <stdio.h>
#include "main.h"
/**
  *print_to_98 - a function to go to 98
  *Retuen: always 0 (success)
  *@n: the number we are going to count to
  */
void print_to_98(int n)
{
	int i, j;

	if (n <= 98)
	{
		for (i = n; i <= 98; i++)
		{
			if (i != 98)
				printf("%d, ", i);
			else
				printf("%d\n", i);
		}
	}
	else if (n >= 98)
	{
		for (j = n; j >= 98; j--)
		{
			if (j != 98)
				printf("%d, ", j);
			else
				printf("%d\n", j);
		}
	}
}
1-alphabet.c/   0           0     0     644     210       `
#include "main.h"
/**
  *print_alphabet - Prints the alphabet in lowercase.
  *Return: always 0 (success)
 */
void print_alphabet(void)
{
	int i;

	for (i = 97; i <= 122; i++)
		_putchar(i);
	_putchar('\n');
}
1-isdigit.c/    0           0     0     644     253       `
#include "main.h"

/**
  *_isdigit - function to check if the character is a digit
  *Return: 1 if it is a digit
  * 0 otherwise
  *@c: the character to be checked
  */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);

}

1-main.c/       0           0     0     644     267       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    int a;
    int b;

    a = 98;
    b = 42;
    printf("a=%d, b=%d\n", a, b);
    swap_int(&a, &b);
    printf("a=%d, b=%d\n", a, b);
    return (0);
}

1-swap.c/       0           0     0     644     239       `
#include "main.h"

/**
  *swap_int - function to swap two variables
  *Return: always 0 (success)
  *@a: first variable to return
  *@b: second variable to return
  */
void swap_int(int *a, int *b)
{
	int i;

	i = *a;
	*a = *b;
	*b = i;
}

2-main.c/       0           0     0     644     238       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *str;
    int len;

    str = "My first strlen!";
    len = _strlen(str);
    printf("%d\n", len);
    return (0);
}
2-mul.c/        0           0     0     644     206       `
#include "main.h"

/**
  *mul - function to multiply two integers
  *Return: the multiplied number
  *@a: first num to multiply
  *@b: second num to multiply
  */
int mul(int a, int b)
{
	return (a * b);
}
/58             0           0     0     644     262       `
#include "main.h"
/**
  *print_alphabet_x10 - Prints the alphabet in lowercase x10.
  *Return: always 0 (success)
 */
void print_alphabet_x10(void)
{
	int i;
	int j;

	for (j = 0; j < 10; j++)
	{
	for (i = 97; i <= 122; i++)
		_putchar(i);
	_putchar('\n');
	}
}
2-strlen.c/     0           0     0     644     261       `
#include "main.h"

/**
  *_strlen - a function to return a string lenght
  *Return: the length of the string sent as a parameter
  *@s: a pointer to the string requierd
  */
int _strlen(char *s)
{
	int j = 0;

	while (s[j] != '\0')
	{
		j++;
	}

	return (j);
}

3-islower.c/    0           0     0     644     260       `
#include "main.h"
/**
  *_islower - function to check if a character is lowercase
  *Return: 1 if character is lowercase
  * 0 otherwise
  * @c: is the character to check
  */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	else
		return (0);
}
3-main.c/       0           0     0     644     220       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *str;

    str = "I do not fear computers. I fear the lack of them - Isaac Asimov";
    _puts(str);
    return (0);
}
/82             0           0     0     644     200       `
#include "main.h"

/**
  *print_numbers - functions to print 0 to 9
  *Return: always 0 (success)
  */
void print_numbers(void)
{
	int i;

	for (i = 48; i < 58; i++)
		_putchar(i);
	_putchar('\n');
}
3-puts.c/       0           0     0     644     245       `
#include "main.h"

/**
  *_puts - function to print to the stdout
  *Return: always 0 (success)
  *@str: a pointer to a string
  */
void _puts(char *str)
{
	int j = 0;

	while (str[j] != '\0')
	{
		_putchar(str[j]);
		j++;
	}
	_putchar('\n');
}

4-isalpha.c/    0           0     0     644     265       `
#include "main.h"
/**
  * _isalpha - check if the character is alphabet
  * Return: 1 if alpha
  * 0 otherwise
  * @c: is the character to be checked
  */
int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
		return (1);
	else
		return (0);
}

4-main.c/       0           0     0     644     224       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *str;

    str = "I do not fear computers. I fear the lack of them - Isaac Asimov";
    print_rev(str);
    return (0);
}
/101            0           0     0     644     243       `
#include "main.h"

/**
  *print_most_numbers - functions to print 0 to 9
  *Return: always 0 (success)
  */
void print_most_numbers(void)
{
	int i;

	for (i = 48; i < 58; i++)
	{
		if (i != 50 && i != 52)
			_putchar(i);
	}
	_putchar('\n');
}

4-print_rev.c/  0           0     0     644     297       `
#include "main.h"

/**
  *print_rev - function to print string in revers
  *Return: always 0 (success)
  *@s: a pointer to the string to print
  */
void print_rev(char *s)
{
	int j = 0;

	while (s[j] != '\0')
	{
		j++;
	}

	j--;

	while (j != -1)
	{
		_putchar(s[j]);
		j--;
	}
	_putchar('\n');
}

5-main.c/       0           0     0     644     218       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char s[10] = "";

    printf("%s\n", s);
    rev_string(s);
    printf("%s\n", s);
    return (0);
}

/125            0           0     0     644     297       `
#include "main.h"

/**
  *more_numbers - function to print some numbers
  *Return: always 0 (success)
  */
void more_numbers(void)
{
	int i;
	int j;

	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 15; j++)
		{
			if (j > 9)
				_putchar('1');
			_putchar(j % 10 + '0');
		}
		_putchar('\n');
	}
}

5-rev_string.c/ 0           0     0     644     421       `
#include "main.h"

/**
  *rev_string - function to revers a string
  *Return: always 0 (success)
  *@s: a pointer to the string
  */
void rev_string(char *s)
{
	int i = 0;
	int j = 0;
	char tmp;

	while (s[i] != '\0')
		i++;
	if (i == 0)
		return;
	i--;

	while (i - j != 0 && i - j != 1)
	{
		tmp = s[i];
		s[i] = s[j];
		s[j] = tmp;
		j++;
		i--;
	}
	if (i - j == 1)
	{
		tmp = s[i];
		s[i] = s[j];
		s[j] = tmp;
	}

}

5-sign.c/       0           0     0     644     377       `
#include "main.h"
/**
  * print_sign - function to show numbers sign
  * Return: 1 if the number is positive
  * 0 if the number is 0
  * -1 if the number is negative
  * @n: is the number we check
  */
int print_sign(int n)
{
	if (n > 0)
	{
		_putchar('+');
		return (1);
	}
	else if (n == 0)
	{
		_putchar('0');
		return (0);
	}
	else
	{
		_putchar('-');
		return (-1);
	}
}

6-abs.c/        0           0     0     644     235       `
#include "main.h"
/**
  * _abs - function to give the absoulute value of a number
  * Return: the absoulute value of the number
  * @i: is the number we check
  */
int _abs(int i)
{
	if (i < 0)
		return (i / -1);
	else
		return (i);
}

6-main.c/       0           0     0     644     167       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *str;

    str = "0123456789";
    puts2(str);
    return (0);
}

6-print_line.c/ 0           0     0     644     267       `
#include "main.h"
/**
  *print_line - function to print a straight line
  *Return: always 0 (success)
  *@n: is the number of characters to print
  */
void print_line(int n)
{
	if (n > 0)
	{
		int i;

		for (i = 0; i < n; i++)
			_putchar('_');
	}
	_putchar('\n');
}

6-puts2.c/      0           0     0     644     264       `
#include "main.h"

/**
  *puts2 - function to print to the stdout
  *Return: always 0 (success)
  *@str: a pointer to a string
  */
void puts2(char *str)
{
	int j = 0;

	while (str[j] != '\0')
	{
		if (j % 2 == 0)
			_putchar(str[j]);
		j++;
	}
	_putchar('\n');
}
7-main.c/       0           0     0     644     171       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *str;

    str = "0123456789";
    puts_half(str);
    return (0);
}

/143            0           0     0     644     387       `
#include "main.h"

/**
  *print_diagonal - function to print a diagonal
  *Return: always 0 (success)
  *@n: number of rows in the diagonal
  */
void print_diagonal(int n)
{
	int i;
	int j;

	if (n > 0)
	{
	for (i = 1; i <= n; i++)
	{
		for (j = 0; j < i; j++)
		{
			if (j != i - 1)
				_putchar(' ');
			else
				_putchar('\\');
		}
		_putchar('\n');
	}
	return;
	}
	_putchar('\n');
}

/163            0           0     0     644     292       `
#include "main.h"
/**
  * print_last_digit - function to print the last digit of a number
  * Return: the last digit of the number
  * @i: the number to be returned
  */
int print_last_digit(int i)
{	int tmp;

	tmp = i % 10;

	if (tmp < 0)
		tmp /= -1;
	_putchar(tmp + '0');
	return (tmp);
}
7-puts_half.c/  0           0     0     644     359       `
#include "main.h"
/**
  *puts_half - function to print half of the characters
  *Return: always 0 (success)
  *@str: a pointer to the string
  */
void puts_half(char *str)
{
	int i = 0;
	int n;

	while (str[i] != '\0')
		i++;

	i--;

	if (i % 2 != 0)
		n = (i - 1) / 2;
	else
		n = i / 2;

	for (n = n + 1; n <= i; n++)
		_putchar(str[n]);
	_putchar('\n');
}

8-24_hours.c/   0           0     0     644     696       `
#include "main.h"
/**
  *jack_bauer - function to print all day minutes
  *Return: always 0 (success)
  */
void jack_bauer(void)
{	int i;
	int j;
	int k;
	int o;

	for (i = 0; i < 3; i++)
		if (i == 2)
			for (j = 0; j < 4; j++)
				for (k = 0; k < 6; k++)
					for (o = 0; o < 10; o++)
					{
						_putchar(i + '0');
						_putchar(j + '0');
						_putchar(':');
						_putchar(k + '0');
						_putchar(o + '0');
						_putchar('\n');
					}
		else
			for (j = 0; j < 10; j++)
				for (k = 0; k < 6; k++)
					for (o = 0; o < 10; o++)
					{
						_putchar(i + '0');
						_putchar(j + '0');
						_putchar(':');
						_putchar(k + '0');
						_putchar(o + '0');
						_putchar('\n');
					}
}
8-main.c/       0           0     0     644     263       `
#include "main.h"

/**
 * main - check the code for
 *
 * Return: Always 0.
 */
int main(void)
{
    int array[5];

    array[0] = 98;
    array[1] = 402;
    array[2] = -198;
    array[3] = 298;
    array[4] = -1024;
    print_array(array, 5);
    return (0);
}

8-print_array.c/0           0     0     644     361       `
#include "main.h"
#include <stdio.h>
/**
  *print_array - function to print number of array elements
  *return: always 0 (success)
  *@a: pointer to the array head
  *@n: number of elements to be printed
  */
void print_array(int *a, int n)
{
	if (n > 0)
	{
		int i;

		printf("%d", a[0]);
		for (i = 1; i < n; i++)
			printf(", %d", a[i]);
	}
	printf("\n");
}

/185            0           0     0     644     327       `
#include "main.h"

/**
  *print_square - function to print a square
  *Return: always 0 (success)
  *@size: is the size of the square
  */
void print_square(int size)
{
	int i, j;

	if (size > 0)
		for (i = 0; i < size; i++)
		{
			for (j = 0; j < size; j++)
				_putchar('#');
			_putchar('\n');
		}
	else
		_putchar('\n');
}

9-fizz_buzz.c/  0           0     0     644     485       `
#include <stdio.h>
#include "main.h"

/**
  *main - a program to indicate the mutiples of 3 and 5
  *Return: always 0 (success)
  */
int main(void)
{
	int i;

	for (i = 1; i <= 100; i++)
	{
		if (i % 3 == 0 && i % 5 != 0)
		{
			printf(" Fizz");
		}
		else if (i % 5 == 0 && i % 3 != 0)
		{
			printf(" Buzz");
		}
		else if (i % 3 == 0 && i % 5 == 0)
		{
			printf(" FizzBuzz");
		}
		else if (i == 1)
			printf("%d", i);
		else
			printf(" %d", i);
	}
	printf("\n");

	return (0);
}

9-main.c/       0           0     0     644     283       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char s1[98];
    char *ptr;

    ptr = _strcpy(s1, "First, solve the problem. Then, write the code\n");
    printf("%s", s1);
    printf("%s", ptr);
    return (0);
}

9-strcpy.c/     0           0     0     644     357       `
#include "main.h"

/**
  *_strcpy - function to copy a string
  *Return: a pointer to the string
  *@dest: a pointer to the destination copy
  *@src: a pointer to the source copy
  */
char *_strcpy(char *dest, char *src)
{
	int i = 0;
	int j = 0;

	while (src[i] != '\0')
		i++;
	for ( ; j < i; j++)
		dest[j] = src[j];

	dest[i] = '\0';

	return (dest);
}

9-times_table.c/0           0     0     644     654       `
#include "main.h"
/**
  *times_table - function to print the times tables
  * Return: always 0 (success)
  */
void times_table(void)
{
	int i;
	int j;
	int k;

	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			k = j * i;
			if (j == 0)
			{
				_putchar(k + '0');
			}
			else if (k < 10 && j != 0)
			{
				_putchar(',');
				_putchar(' ');
				_putchar(' ');
				_putchar(k + '0');
			}
			else if (k > 9)
			{
				_putchar(',');
				_putchar(' ');
				_putchar((k / 10) + '0');
				_putchar((k % 10) + '0');
			}
			else
			{
				_putchar(' ');
				_putchar((k / 10) + '0');
				_putchar((k % 10) + '0');
			}

		}
		_putchar('\n');
	}
}
functions2.c/   0           0     0     644     697       `
#include "main.h"
/**
  *_strcmp - function 6
  *Return: 1
  *@s1: var
  *@s2: var
  */
int _strcmp(char *s1, char *s2)
{
	return (1);
}

/**
  *_memset - function 7
  *Return: s
  *@s: var
  *@b: var
  *@n: var
  */

char *_memset(char *s, char b, unsigned int n)
{
	return (s);
}

/**
  *_memcpy - function 8
  *Return: dest
  *@dest: var
  *@src: var
  *@n: var
  */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	return (dest);
}
/**
  *_strchr - function 9
  *Return: s
  *@s: var
  *@c: var
  */
char *_strchr(char *s, char c)
{
	return (s);
}

/**
  *_strspn - function 10
  *Return: 1
  *@s: var
  *@accept: var
  */

unsigned int _strspn(char *s, char *accept)
{
	return (1);
}

functions3.c/   0           0     0     644     305       `
#include "main.h"
/**
  *_strpbrk - function 11
  *Return: s
  *@s: var
  *@accept: var
  */
char *_strpbrk(char *s, char *accept)
{
	return (s);
}

/**
  *_strstr - function 12
  *Return: haystack
  *@haystack: var
  *@needle: var
  */
char *_strstr(char *haystack, char *needle)
{
	return (haystack);
}

functions.c/    0           0     0     644     686       `
#include "main.h"

/**
  *_strcpy - function 1
  *Return: dest
  *@dest: var
  *@src: var
  */
char *_strcpy(char *dest, char *src)
{
	return (dest);
}

/**
  *_atoi - function 2
  *Return: 0
  *@s: var
  */

int _atoi(char *s)
{
	return (0);
}

/**
  *_strcat - function 3
  *Return: dest
  *@dest: var
  *@src: var
  */
char *_strcat(char *dest, char *src)
{
	return (dest);
}

/**
  *_strncat - function 4
  *Return: dest
  *@dest: var
  *@src:var
  *@n: var
  */
char *_strncat(char *dest, char *src, int n)
{
	return (dest);
}

/**
  *_strncpy - function 5
  *Return: dest
  *@dest: var
  *@src: var
  *@n: var
  */
char *_strncpy(char *dest, char *src, int n)
{
	return (dest);
}
main.c/         0           0     0     644     133       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    print_alphabet();
    return (0);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

test.c/         0           0     0     644     109       `
#include <stdio.h>
#include <limits.h>
#include "main.h"
int main(void)
{
	_putchar(INT_MIN);
	return (0);
}

